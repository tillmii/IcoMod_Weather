/*
  IcoMod_StartScreen.cpp - IcoDesk Module to display the animated Logo.
  Created by Till Michels, February 2, 2023.
*/

#include "Arduino.h"
#include <Adafruit_GFX.h>
#include <Adafruit_ST7735.h>
#include <HTTPClient.h>
#include "IcoMod_Weather.h"
#include <Arduino_JSON.h>

static unsigned char wi_day_sunny_bits[] = {
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x80, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0,
  0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x03, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0xc0, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0,
  0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x03, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0xc0, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0,
  0x03, 0x00, 0x00, 0x00, 0x00, 0x38, 0x00, 0x80, 0x01, 0x00, 0x1c, 0x00,
  0x00, 0x78, 0x00, 0x00, 0x00, 0x00, 0x1e, 0x00, 0x00, 0xf8, 0x00, 0x00,
  0x00, 0x00, 0x1f, 0x00, 0x00, 0xf0, 0x01, 0x00, 0x00, 0x80, 0x0f, 0x00,
  0x00, 0xe0, 0x03, 0x00, 0x00, 0xc0, 0x07, 0x00, 0x00, 0xc0, 0x03, 0x00,
  0x00, 0xc0, 0x03, 0x00, 0x00, 0x80, 0x03, 0x00, 0x00, 0xc0, 0x01, 0x00,
  0x00, 0x00, 0x00, 0xe0, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfc,
  0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x80, 0x3f, 0xfc, 0x01, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x07,
  0xe0, 0x03, 0x00, 0x00, 0x00, 0x00, 0xe0, 0x03, 0xc0, 0x07, 0x00, 0x00,
  0x00, 0x00, 0xf0, 0x01, 0x80, 0x0f, 0x00, 0x00, 0x00, 0x00, 0xf0, 0x00,
  0x00, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x78, 0x00, 0x00, 0x1e, 0x00, 0x00,
  0x00, 0x00, 0x38, 0x00, 0x00, 0x1c, 0x00, 0x00, 0x00, 0x00, 0x3c, 0x00,
  0x00, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x3c, 0x00, 0x00, 0x3c, 0x00, 0x00,
  0xf0, 0x07, 0x1c, 0x00, 0x00, 0x38, 0xe0, 0x0f, 0xf8, 0x0f, 0x1c, 0x00,
  0x00, 0x38, 0xf0, 0x1f, 0xf8, 0x0f, 0x1c, 0x00, 0x00, 0x38, 0xf0, 0x1f,
  0xf0, 0x07, 0x1c, 0x00, 0x00, 0x38, 0xe0, 0x0f, 0x00, 0x00, 0x3c, 0x00,
  0x00, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x1c, 0x00, 0x00,
  0x00, 0x00, 0x38, 0x00, 0x00, 0x1c, 0x00, 0x00, 0x00, 0x00, 0x78, 0x00,
  0x00, 0x1e, 0x00, 0x00, 0x00, 0x00, 0xf0, 0x00, 0x00, 0x0f, 0x00, 0x00,
  0x00, 0x00, 0xf0, 0x01, 0x80, 0x0f, 0x00, 0x00, 0x00, 0x00, 0xe0, 0x03,
  0xc0, 0x07, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x07, 0xe0, 0x03, 0x00, 0x00,
  0x00, 0x00, 0x80, 0x3f, 0xfc, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff,
  0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfc, 0x3f, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0xe0, 0x07, 0x00, 0x00, 0x00, 0x00, 0x80, 0x03, 0x00,
  0x00, 0xc0, 0x01, 0x00, 0x00, 0xc0, 0x03, 0x00, 0x00, 0xc0, 0x03, 0x00,
  0x00, 0xe0, 0x03, 0x00, 0x00, 0xc0, 0x07, 0x00, 0x00, 0xf0, 0x01, 0x00,
  0x00, 0x80, 0x0f, 0x00, 0x00, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x1f, 0x00,
  0x00, 0x78, 0x00, 0x00, 0x00, 0x00, 0x1e, 0x00, 0x00, 0x38, 0x00, 0x80,
  0x01, 0x00, 0x1c, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x03, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0xc0, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0,
  0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x03, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0xc0, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0,
  0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x03, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x80, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

static unsigned char wi_cloud_bits[] = {
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0xfc, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xff,
  0x1f, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe0, 0xff, 0x7f, 0x00, 0x00, 0x00,
  0x00, 0x00, 0xf0, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0x0f,
  0xff, 0x01, 0x00, 0x00, 0x00, 0x00, 0xfc, 0x03, 0xf8, 0x03, 0x00, 0x00,
  0x00, 0x00, 0xfe, 0x00, 0xf0, 0x07, 0x00, 0x00, 0x00, 0x00, 0x3e, 0x00,
  0xc0, 0x07, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x00, 0x80, 0x0f, 0x00, 0x00,
  0x00, 0x00, 0x1f, 0x00, 0x80, 0x1f, 0x00, 0x00, 0x00, 0x80, 0x0f, 0x00,
  0x00, 0x1f, 0x00, 0x00, 0x00, 0x80, 0x0f, 0x00, 0x00, 0x3f, 0x00, 0x00,
  0x00, 0xc0, 0x0f, 0x00, 0x00, 0xfe, 0x03, 0x00, 0x00, 0xf0, 0x07, 0x00,
  0x00, 0xfe, 0x0f, 0x00, 0x00, 0xfc, 0x07, 0x00, 0x00, 0xfc, 0x3f, 0x00,
  0x00, 0xfe, 0x03, 0x00, 0x00, 0xfc, 0x7f, 0x00, 0x00, 0xff, 0x03, 0x00,
  0x00, 0xf0, 0xff, 0x00, 0x80, 0x3f, 0x00, 0x00, 0x00, 0x00, 0xfc, 0x01,
  0xc0, 0x0f, 0x00, 0x00, 0x00, 0x00, 0xf0, 0x03, 0xc0, 0x07, 0x00, 0x00,
  0x00, 0x00, 0xe0, 0x03, 0xc0, 0x07, 0x00, 0x00, 0x00, 0x00, 0xe0, 0x07,
  0xe0, 0x03, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x07, 0xe0, 0x03, 0x00, 0x00,
  0x00, 0x00, 0xc0, 0x07, 0xe0, 0x01, 0x00, 0x00, 0x00, 0x00, 0x80, 0x07,
  0xe0, 0x01, 0x00, 0x00, 0x00, 0x00, 0x80, 0x07, 0xe0, 0x01, 0x00, 0x00,
  0x00, 0x00, 0x80, 0x07, 0xe0, 0x01, 0x00, 0x00, 0x00, 0x00, 0x80, 0x07,
  0xe0, 0x03, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x07, 0xe0, 0x03, 0x00, 0x00,
  0x00, 0x00, 0xc0, 0x07, 0xe0, 0x07, 0x00, 0x00, 0x00, 0x00, 0xe0, 0x07,
  0xc0, 0x07, 0x00, 0x00, 0x00, 0x00, 0xe0, 0x03, 0xc0, 0x0f, 0x00, 0x00,
  0x00, 0x00, 0xf0, 0x03, 0x80, 0x3f, 0x00, 0x00, 0x00, 0x00, 0xfc, 0x01,
  0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0xfe, 0xff, 0xff,
  0xff, 0xff, 0x7f, 0x00, 0x00, 0xfc, 0xff, 0xff, 0xff, 0xff, 0x3f, 0x00,
  0x00, 0xf0, 0xff, 0xff, 0xff, 0xff, 0x0f, 0x00, 0x00, 0xc0, 0xff, 0xff,
  0xff, 0xff, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

IcoMod_Weather::IcoMod_Weather(Adafruit_ST7735 *tft, const char *city, const char *privateKey, unsigned long refreshTime)
{
  _tft = tft;
  _city = city;
  _privateKey = privateKey;
  _refreshTime = refreshTime;
}

bool stringFitsOnScreen(Adafruit_ST7735 *tft, const String &textBuf, uint16_t x, uint16_t y, uint8_t textSize, uint16_t textColor)
{
  tft->setTextSize(textSize);
  tft->setTextColor(textColor);

  int16_t x1, y1;
  uint16_t comparisonSize[2] = {0, 0};
  uint16_t size[2] = {0, 0};

  tft->getTextBounds("A", 0, 0, &x1, &y1, &comparisonSize[0], &comparisonSize[1]);
  tft->getTextBounds(textBuf, x, y, &x1, &y1, &size[0], &size[1]);

  Serial.print("CompSize: ");
  Serial.println(comparisonSize[1]);
  Serial.print("Size: ");
  Serial.println(size[1]);
  Serial.print("String: ");
  Serial.println(textBuf);

  return size[1] == comparisonSize[1];
}

void printTextCentered(Adafruit_ST7735 *tft, const String &textBuf, uint16_t x, uint16_t y, uint8_t textSize, uint16_t textColor)
{
  int16_t x1, y1;
  uint16_t size[2] = {0, 0};
  tft->setTextSize(textSize);
  tft->setTextColor(textColor);
  tft->getTextBounds(textBuf, 0, 0, &x1, &y1, &size[0], &size[1]); // calc width of new string
  tft->setCursor(x - size[0] / 2, y - size[1] / 2);
  tft->print(textBuf);
}

void printLinesCentered(Adafruit_ST7735 *tft, const String &textBuf, uint16_t x, uint16_t y, uint8_t textSize, uint16_t textColor)
{
  // Check if whole string fits
  if (stringFitsOnScreen(tft, textBuf, x, y, textSize, textColor))
  {
    Serial.print("The String: ");
    Serial.print(textBuf);
    Serial.println(" fits on screen.");
    printTextCentered(tft, textBuf, x, y, textSize, textColor);
    return;
  }

  int16_t x1, y1;
  uint16_t comparisonSize[2] = {0, 0};
  uint16_t size[2] = {0, 0};

  String str = textBuf;
  String words[20];
  int wordCount = 0;

  // Split the string into substrings
  while (str.length() > 0)
  {
    int index = str.indexOf(' ');
    if (index == -1) // No space found
    {
      words[wordCount++] = str;
      break;
    }
    else
    {
      words[wordCount++] = str.substring(0, index);
      str = str.substring(index + 1);
    }
  }

  String line = "";
  for (int i = 0; i < wordCount - 1; i++)
  {
    line += words[i] + " ";

    // Check if next line would fit
    if (!stringFitsOnScreen(tft, line + words[i + 1], x, y, textSize, textColor))
    {
      printTextCentered(tft, line, x, y, textSize, textColor);

      String tail = "";
      for (int j = i + 1; j < wordCount; j++)
      {
        tail += words[j] + " ";
      }
      printLinesCentered(tft, tail, x, y + comparisonSize[1] + 10, textSize, textColor);
      return;
    }
  }
}

String httpGETRequest(const char *serverName)
{
  WiFiClient client;
  HTTPClient http;

  // Your Domain name with URL path or IP address with path
  http.begin(client, serverName);

  // Send HTTP POST request
  int httpResponseCode = http.GET();

  String payload = "{}";

  if (httpResponseCode > 0)
  {
    Serial.print("HTTP Response code: ");
    Serial.println(httpResponseCode);
    payload = http.getString();
  }
  else
  {
    Serial.print("Error code: ");
    Serial.println(httpResponseCode);
  }

  // Free resources
  http.end();

  return payload;
}

void IcoMod_Weather::onClick()
{
}

void IcoMod_Weather::initialize()
{
  _lastRefresh = millis();

  _tft->fillScreen(ST77XX_BLACK);

  // _tft->setCursor(10, 10);
  // _tft->setTextSize(1);
  // _tft->print("Weather ");
  // _tft->print(_city);
}

void IcoMod_Weather::refresh()
{
  static String url = "http://api.openweathermap.org/data/2.5/weather?q=" + String(_city) + "&units=metric" + "&appid=" + String(_privateKey);
  static String jsonBuffer = "";

  if (millis() >= _lastRefresh)
  {
    _lastRefresh += _refreshTime;

    if (WiFi.status() != WL_CONNECTED)
    {
      Serial.println("Can't fetch weather data. WiFi Disconnected...");
      return;
    }

    Serial.print("URL: ");
    Serial.println(url);

    jsonBuffer = httpGETRequest(url.c_str());

    JSONVar weatherData = JSON.parse(jsonBuffer);

    if (JSON.typeof(weatherData) == "undefined")
    {
      Serial.println("Parsing weather data failed!");
      return;
    }

    Serial.print("JSON object = ");
    Serial.println(weatherData);
    Serial.print("Temperature: ");
    Serial.println(weatherData["main"]["temp"]);
    Serial.print("Pressure: ");
    Serial.println(weatherData["main"]["pressure"]);
    Serial.print("Humidity: ");
    Serial.println(weatherData["main"]["humidity"]);
    Serial.print("Wind Speed: ");
    Serial.println(weatherData["wind"]["speed"]);

    _tft->drawXBitmap(_tft->width() / 2 - 32, 6, wi_day_sunny_bits, 64, 64, ST7735_WHITE);

    int roundedTemp = (int)round((double)weatherData["main"]["temp"]);
    printTextCentered(_tft, String(roundedTemp), _tft->width() / 2 - 6, 100, 3, ST7735_WHITE);

    _tft->setTextSize(2);
    _tft->setCursor(_tft->getCursorX(), _tft->getCursorY() - 10);
    _tft->print("o");

    printLinesCentered(_tft, weatherData["weather"][0]["description"], _tft->width() / 2, _tft->height() / 6 * 5, 1.5, ST7735_WHITE);
  }
}